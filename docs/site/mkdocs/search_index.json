{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the Command-Line Corral\n\n\nThis site is a resource for teaching yourself to be what I like to call a \"console cowboy.\"  \n\n\nIf you take the time to read through all of the information contained herein, you probably won't be able to walk into Google and get a job building AIs to take over the world.  However, you \nwill\n be able to understand the steps you need to take to get to the point where you can, and it will be much easier for you to take those steps if that's something you want to do.\n\n\nDisclaimer/Warnings/Preachy Stuff\n\n\nThe information contained on this site has the potential to give you a lot of power- and with great power comes great responsibility.  While that may sound like a cliche, it is arguably the most important piece of information that I can pass along.  If you study all of these materials and practice enough, you will be able to do things that are commonly referred to as 'hacking' (for instance, with only a rudimentary understanding of networking and wireless protocols, you will be able to exploit insecure wireless networks).  However, just because you CAN do something with technology does not mean that you SHOULD do that thing.  There are very real consequences for using technology in an unethical fashion- and while I cannot actively prevent you from doing so, I want to stress the point that it isn't a good idea.  \n\n\nBlackhat hackers are the ones that are the most popular in the media. These hackers are known to be the \u2018bad guys\u2019 since they wreak havoc in multiple industries and are usually motivated by personal or financial gain. Their goals are to steal personal information such as credit card numbers, social security numbers, etc. for malicious reasons or to sell to identity thieves. Blackhat hackers do not ask permission to infiltrate a system, and many of their activities are illegal.\n\n\nWhitehat hackers are the opposite of blackhat hackers, the whitehat hackers are the \u2018good guys\u2019 or ethical hackers. Yes, they still compromise systems but they do it with permission. Many times their goal is to find a security vulnerability that they will disclose to the organization so that improvements can be made to improve their defenses. This is known as penetration testing and is just one example of an exercise performed by a whitehat hacker. When a whitehat hacker informs developers of vulnerabilities they have found, patches and security improvements can be made before the system is ever compromised.\n\n\nThe following is an excerpt from a talk given by a Blackhat to a group of wannabe Blackhats on the \"deep web:\"\n\n\n\n\n\"You'll find your business opportunities and your own worth in the community skyrocket if you become an elite who knows tech.  Many people will want you to be their contact solely for the fact that you're among the few that know tech to the extent many do not.\n\n\nThe only bonds that tie in the blackhat community are fear and profit.\n\n\nKeep in mind this isn't a community that does things for fun or to make a point. You're dealing with drug kingpins, criminal syndicates, money launderers, and other blackhats who only care for their personal flow of coin and the flow of commerce.\n\n\nWe are not in this for fame. We are not in this for fun. The game is a tad bit different because you're dealing with greed. Like true greed. Thousands. Hundreds of thousands. Millions. Billions in some cases.\n\n\nIf they find you a threat they'll try to come after your contacts and credibility. Whether it means sabotaging your business in some way, or ruining your name with something embarrassing in an attempt to have you lose contacts.\n\n\nThey'll try whatever they can to threaten your flow of coin, or your life.\"\n\n\n\n\nI've included this so that you know exactly what you'd be getting into if you choose to wear a black hat and use this information for the wrong purposes.  Operating as part of the Blackhat community isn't only dangerous because of the risk that you'll be caught by law enforcement, it's also dangerous because real Blackhats are bad guys in every sense of the phrase.  They're criminals out for personal gain, and they have no problem with taking action against people who get in their way, or attacking people that make themselves easy targets. Never forget- no matter how good you are, there is always someone out there who is better, and if you give them a reason to, they will be able to find you, and because of their superior technical knowledge, the number of people that will be able to help you when this happens is very low.  If you get yourself in with the wrong people, you can very easily face a choice between letting them ruin your life, finances, and relationships, or admitting what you've done to the police and possibly going to prison.\n\n\nAll of this can be boiled down to the following rules of thumb for working with 'advanced' technology:\n\n\n\n\n\n\nDon't ever do anything you wouldn't want your family to know about.\n\n\nThe internet never forgets, and ANYTHING you do on the internet can end up published for everyone to see.\n\n\n\n\n\n\nStay off TOR (the \"Deep Web\").\n\n\nIt is not a glamorous place, and for every piece of useful information that you might find, there are thousands of pieces of information that could get you in major trouble with the law (in the best case), or with hardened criminals (in the worst case).\n\n\n\n\n\n\nIf you stumble upon information that seems confidential or sensitive, don't share it with anyone except the owner (or the authorities, if it happens to be illegal).\n\n\nWhen people learn that you understand technology at a high level, you will be presented with a lot of situations where you'll be dealing with other people's data.  For instance, one of your friends might have a computer that's running slow and ask you to take a look at it, and during this process, you might accidentally see an embarrassing email that they sent.  While it might be tempting to share the contents of the email with someone else for a laugh or personal gain, don't do it- just pretend that you never saw it.  The only exception to this is that if it's something that you suspect is illegal, you should notify the proper authorities.\n\n\n\n\n\n\nTreat all computers like houses.    \n\n\nYou wouldn't leave your front door unlocked, so don't leave your accounts open or protected by weak passwords.\n\n\nYou wouldn't kick down the door of someone's house to get in, so don't try to break into other people's computers.\n\n\nYou wouldn't invite random strangers into your house, so don't download things from sources that you don't trust.\n\n\nEtc.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-command-line-corral",
            "text": "This site is a resource for teaching yourself to be what I like to call a \"console cowboy.\"    If you take the time to read through all of the information contained herein, you probably won't be able to walk into Google and get a job building AIs to take over the world.  However, you  will  be able to understand the steps you need to take to get to the point where you can, and it will be much easier for you to take those steps if that's something you want to do.",
            "title": "Welcome to the Command-Line Corral"
        },
        {
            "location": "/#disclaimerwarningspreachy-stuff",
            "text": "The information contained on this site has the potential to give you a lot of power- and with great power comes great responsibility.  While that may sound like a cliche, it is arguably the most important piece of information that I can pass along.  If you study all of these materials and practice enough, you will be able to do things that are commonly referred to as 'hacking' (for instance, with only a rudimentary understanding of networking and wireless protocols, you will be able to exploit insecure wireless networks).  However, just because you CAN do something with technology does not mean that you SHOULD do that thing.  There are very real consequences for using technology in an unethical fashion- and while I cannot actively prevent you from doing so, I want to stress the point that it isn't a good idea.    Blackhat hackers are the ones that are the most popular in the media. These hackers are known to be the \u2018bad guys\u2019 since they wreak havoc in multiple industries and are usually motivated by personal or financial gain. Their goals are to steal personal information such as credit card numbers, social security numbers, etc. for malicious reasons or to sell to identity thieves. Blackhat hackers do not ask permission to infiltrate a system, and many of their activities are illegal.  Whitehat hackers are the opposite of blackhat hackers, the whitehat hackers are the \u2018good guys\u2019 or ethical hackers. Yes, they still compromise systems but they do it with permission. Many times their goal is to find a security vulnerability that they will disclose to the organization so that improvements can be made to improve their defenses. This is known as penetration testing and is just one example of an exercise performed by a whitehat hacker. When a whitehat hacker informs developers of vulnerabilities they have found, patches and security improvements can be made before the system is ever compromised.  The following is an excerpt from a talk given by a Blackhat to a group of wannabe Blackhats on the \"deep web:\"   \"You'll find your business opportunities and your own worth in the community skyrocket if you become an elite who knows tech.  Many people will want you to be their contact solely for the fact that you're among the few that know tech to the extent many do not.  The only bonds that tie in the blackhat community are fear and profit.  Keep in mind this isn't a community that does things for fun or to make a point. You're dealing with drug kingpins, criminal syndicates, money launderers, and other blackhats who only care for their personal flow of coin and the flow of commerce.  We are not in this for fame. We are not in this for fun. The game is a tad bit different because you're dealing with greed. Like true greed. Thousands. Hundreds of thousands. Millions. Billions in some cases.  If they find you a threat they'll try to come after your contacts and credibility. Whether it means sabotaging your business in some way, or ruining your name with something embarrassing in an attempt to have you lose contacts.  They'll try whatever they can to threaten your flow of coin, or your life.\"   I've included this so that you know exactly what you'd be getting into if you choose to wear a black hat and use this information for the wrong purposes.  Operating as part of the Blackhat community isn't only dangerous because of the risk that you'll be caught by law enforcement, it's also dangerous because real Blackhats are bad guys in every sense of the phrase.  They're criminals out for personal gain, and they have no problem with taking action against people who get in their way, or attacking people that make themselves easy targets. Never forget- no matter how good you are, there is always someone out there who is better, and if you give them a reason to, they will be able to find you, and because of their superior technical knowledge, the number of people that will be able to help you when this happens is very low.  If you get yourself in with the wrong people, you can very easily face a choice between letting them ruin your life, finances, and relationships, or admitting what you've done to the police and possibly going to prison.  All of this can be boiled down to the following rules of thumb for working with 'advanced' technology:    Don't ever do anything you wouldn't want your family to know about.  The internet never forgets, and ANYTHING you do on the internet can end up published for everyone to see.    Stay off TOR (the \"Deep Web\").  It is not a glamorous place, and for every piece of useful information that you might find, there are thousands of pieces of information that could get you in major trouble with the law (in the best case), or with hardened criminals (in the worst case).    If you stumble upon information that seems confidential or sensitive, don't share it with anyone except the owner (or the authorities, if it happens to be illegal).  When people learn that you understand technology at a high level, you will be presented with a lot of situations where you'll be dealing with other people's data.  For instance, one of your friends might have a computer that's running slow and ask you to take a look at it, and during this process, you might accidentally see an embarrassing email that they sent.  While it might be tempting to share the contents of the email with someone else for a laugh or personal gain, don't do it- just pretend that you never saw it.  The only exception to this is that if it's something that you suspect is illegal, you should notify the proper authorities.    Treat all computers like houses.      You wouldn't leave your front door unlocked, so don't leave your accounts open or protected by weak passwords.  You wouldn't kick down the door of someone's house to get in, so don't try to break into other people's computers.  You wouldn't invite random strangers into your house, so don't download things from sources that you don't trust.  Etc.",
            "title": "Disclaimer/Warnings/Preachy Stuff"
        },
        {
            "location": "/lavm/",
            "text": "Module 1: Linux & Virtual Machines\n\n\nThe first step to getting underway with learning to be a console cowboy is to familiarize yourself with the Linux operating system.  While it is possible to undertake \ndevelopment work on Windows, it is much more difficult than doing so on Linux, as each individual component and dependency must be manually installed, with no sort of \nautomatic compatibility checking.  Over time, the more components and libraries you add, the harder it is to keep them working together, until you find yourself \ntroubleshooting Windows more than your code.  Linux also has the advantage of being written by programmers for programmers, so it is deeply customizable and offers many \nutilities for controlling what it does at a very fine-grained level.  The las, most important difference between Windows and Linux is that it Linux is comprised of \nfreely-available \"open source\" software.\n\n\nWhy Open Source?\n\n\nOpen source software has a couple big advantages over \"proprietary\" or \"licensed\" software:\n\n\n\n\n\n\nIt's free!  You won't ever run into a situation where you need to pay for a software package on Linux.\n\n\n\n\n\n\nThe source code is publicly available.  As you get more experience with the concepts in this course, you will probably run into situations where you would like to \nlearn how a particular application that you use does what it does, or to customize the application itself.  This isn't really something you can do with proprietary \nsoftware (unless said software comes bundled with tools for doing so), but when it comes to open source software, it's quite easy to do (provided that you can read and \nwrite the programming language that the application is written in).\n\n\n\n\n\n\nLots of community support exists.  In the world of proprietary software, if you run into an issue, it can be very difficult to get in touch with the people who \ndeveloped the software for help.  When it comes to open source software, simply googling an error message will return a huge number of articles and discussions about the \nissue, often with step-by-step instructions for fixing it.  Most developers also publish huge piles of documentation for their software on the internet, which you can \nrefer to for help.  If all of this this fails for some reason, you can usually get directly in touch with the developers directly via email/IM, and they can probably \nhelp you.\n\n\n\n\n\n\nVirtual Machines\n\n\nNow, you might be thinking that you'll have to install Linux on its own dedicated machine, which you might not have at the moment.  Thankfully, the technology exists \nto run Linux inside of the Windows operating system using something called a 'virtual machine.'  A virtual machine (VM) is an emulation of a computer system. Virtual \nmachines are based on computer architectures and provide functionality of a physical computer. They also isolate the OS from the machine running the VM, so if you break \nsomething beyond repair (which you probably will at some point), you'll only have to fix the VM rather than the whole computer.\n\n\nBefore you can get started with this module, you're going to need two things- a hypervisor and a Linux ISO.\n\n\nHypervisor Installation\n\n\nA hypervisor or virtual machine monitor (VMM) is computer software, firmware or hardware that creates and runs virtual machines. A computer on which a hypervisor runs \none or more virtual machines is called a host machine, and each virtual machine is called a guest machine. The hypervisor presents the guest operating systems with a \nvirtual operating platform and manages the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized \nhardware resources: for example, Linux, Windows, and macOS instances can all run on a single physical x86 machine.\n\n\nThe hypervisor that I prefer the most is VirtualBox, which you can download for free \nhere.\n\n\nGo ahead and install it, then take some time to read through the documentation \nhere\n and \n\nhere.\n\n\nISO Installation\n\n\nYour next step is to acquire an ISO file (basically a virtual \"installation CD\") for the Linux distribution you would like to use.  While there are many different kinds \nof Linux distributions (or 'distros'), the largest and most popular is called Ubuntu, and I would recommend that you start with it because there is such a large user \nbase that you should be able to find information about just about any issue you run into while using it just by searching the internet.\n\n\nYou can acquire the \n16.04 LTS (long-term service/support) Ubuntu ISO here.\n\n\nOnce you've downloaded it, go ahead and install it on VirtualBox, \nfollowing this guide (including the Guest Additions bit).\n\n\nNow it's TIME TO LEARN SOME THINGS\n\n\nOnce you've gotten everything installed, start working through \nthis Linux sysadmin \ncourse.\n The course will give you a complete introduction to all of the concepts \nthat you'll need to learn your way around Linux.  \n\n\nIf at this point you feel like you might want to do a deep-dive into a Linux book, start with the free ict@innovation \nTraining Guide on\nLinux System Administration\n, or the more in-depth (but still free) FTA \nGNU/Linux Advanced Administration\n book.\n\n\nIf you still find yourself wanting even more information, you can start by tracking down one of the following books:\n\n\nHow Linux Works, 2nd Edition: What Every Superuser Should Know\n\n\nUNIX and Linux System Administration Handbook, 4th Edition",
            "title": "Module 1- Linux and VMs"
        },
        {
            "location": "/lavm/#module-1-linux-virtual-machines",
            "text": "The first step to getting underway with learning to be a console cowboy is to familiarize yourself with the Linux operating system.  While it is possible to undertake \ndevelopment work on Windows, it is much more difficult than doing so on Linux, as each individual component and dependency must be manually installed, with no sort of \nautomatic compatibility checking.  Over time, the more components and libraries you add, the harder it is to keep them working together, until you find yourself \ntroubleshooting Windows more than your code.  Linux also has the advantage of being written by programmers for programmers, so it is deeply customizable and offers many \nutilities for controlling what it does at a very fine-grained level.  The las, most important difference between Windows and Linux is that it Linux is comprised of \nfreely-available \"open source\" software.",
            "title": "Module 1: Linux &amp; Virtual Machines"
        },
        {
            "location": "/lavm/#why-open-source",
            "text": "Open source software has a couple big advantages over \"proprietary\" or \"licensed\" software:    It's free!  You won't ever run into a situation where you need to pay for a software package on Linux.    The source code is publicly available.  As you get more experience with the concepts in this course, you will probably run into situations where you would like to \nlearn how a particular application that you use does what it does, or to customize the application itself.  This isn't really something you can do with proprietary \nsoftware (unless said software comes bundled with tools for doing so), but when it comes to open source software, it's quite easy to do (provided that you can read and \nwrite the programming language that the application is written in).    Lots of community support exists.  In the world of proprietary software, if you run into an issue, it can be very difficult to get in touch with the people who \ndeveloped the software for help.  When it comes to open source software, simply googling an error message will return a huge number of articles and discussions about the \nissue, often with step-by-step instructions for fixing it.  Most developers also publish huge piles of documentation for their software on the internet, which you can \nrefer to for help.  If all of this this fails for some reason, you can usually get directly in touch with the developers directly via email/IM, and they can probably \nhelp you.",
            "title": "Why Open Source?"
        },
        {
            "location": "/lavm/#virtual-machines",
            "text": "Now, you might be thinking that you'll have to install Linux on its own dedicated machine, which you might not have at the moment.  Thankfully, the technology exists \nto run Linux inside of the Windows operating system using something called a 'virtual machine.'  A virtual machine (VM) is an emulation of a computer system. Virtual \nmachines are based on computer architectures and provide functionality of a physical computer. They also isolate the OS from the machine running the VM, so if you break \nsomething beyond repair (which you probably will at some point), you'll only have to fix the VM rather than the whole computer.  Before you can get started with this module, you're going to need two things- a hypervisor and a Linux ISO.",
            "title": "Virtual Machines"
        },
        {
            "location": "/lavm/#hypervisor-installation",
            "text": "A hypervisor or virtual machine monitor (VMM) is computer software, firmware or hardware that creates and runs virtual machines. A computer on which a hypervisor runs \none or more virtual machines is called a host machine, and each virtual machine is called a guest machine. The hypervisor presents the guest operating systems with a \nvirtual operating platform and manages the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized \nhardware resources: for example, Linux, Windows, and macOS instances can all run on a single physical x86 machine.  The hypervisor that I prefer the most is VirtualBox, which you can download for free  here.  Go ahead and install it, then take some time to read through the documentation  here  and  here.",
            "title": "Hypervisor Installation"
        },
        {
            "location": "/lavm/#iso-installation",
            "text": "Your next step is to acquire an ISO file (basically a virtual \"installation CD\") for the Linux distribution you would like to use.  While there are many different kinds \nof Linux distributions (or 'distros'), the largest and most popular is called Ubuntu, and I would recommend that you start with it because there is such a large user \nbase that you should be able to find information about just about any issue you run into while using it just by searching the internet.  You can acquire the  16.04 LTS (long-term service/support) Ubuntu ISO here.  Once you've downloaded it, go ahead and install it on VirtualBox,  following this guide (including the Guest Additions bit).",
            "title": "ISO Installation"
        },
        {
            "location": "/lavm/#now-its-time-to-learn-some-things",
            "text": "Once you've gotten everything installed, start working through  this Linux sysadmin \ncourse.  The course will give you a complete introduction to all of the concepts \nthat you'll need to learn your way around Linux.    If at this point you feel like you might want to do a deep-dive into a Linux book, start with the free ict@innovation  Training Guide on\nLinux System Administration , or the more in-depth (but still free) FTA  GNU/Linux Advanced Administration  book.  If you still find yourself wanting even more information, you can start by tracking down one of the following books:  How Linux Works, 2nd Edition: What Every Superuser Should Know  UNIX and Linux System Administration Handbook, 4th Edition",
            "title": "Now it's TIME TO LEARN SOME THINGS"
        },
        {
            "location": "/bash/",
            "text": "Module 2: Bash Scripting\n\n\nOnce you have a working knowledge of the Linux operating system, you might find it useful to start automating various tasks within the system, or writing little utility programs for yourself to make it easier to perform certain tasks.  This is the first point where you're going to be doing \"real programming.\"  The reason that I recommend that people learn bash scripting is because:\n\n\n\n\n\n\nDoing so does not require any additional tools other than those included by default in Linux. \n\n\n\n\n\n\nBash isn't an \"object oriented\" language, and because of this is written in a more linear fashion than your run of the mill modern program.  Learning to program \nlinearly before learning to program in an object-oriented context will help you make the transition in a much smoother fashion, and more directly understand the \nadvantages/disadvantages of an object-oriented paradigm.\n\n\n\n\n\n\nBash scripting is one of the most useful tools in the tech industry, because it allows you to automate complex tasks that you find yourself performing on a regular \nbasis.\n\n\n\n\n\n\nThis video series will give you a good introduction to bash scripting.\n\n\nThe information from the above course can be supplemented with the following free books:\n\n\n\n\nBash Beginners Guide\n\n\nAdvanced Bash Scripting\n\n\nBash Academy Guide",
            "title": "Module 2- Bash Scripting"
        },
        {
            "location": "/bash/#module-2-bash-scripting",
            "text": "Once you have a working knowledge of the Linux operating system, you might find it useful to start automating various tasks within the system, or writing little utility programs for yourself to make it easier to perform certain tasks.  This is the first point where you're going to be doing \"real programming.\"  The reason that I recommend that people learn bash scripting is because:    Doing so does not require any additional tools other than those included by default in Linux.     Bash isn't an \"object oriented\" language, and because of this is written in a more linear fashion than your run of the mill modern program.  Learning to program \nlinearly before learning to program in an object-oriented context will help you make the transition in a much smoother fashion, and more directly understand the \nadvantages/disadvantages of an object-oriented paradigm.    Bash scripting is one of the most useful tools in the tech industry, because it allows you to automate complex tasks that you find yourself performing on a regular \nbasis.    This video series will give you a good introduction to bash scripting.  The information from the above course can be supplemented with the following free books:   Bash Beginners Guide  Advanced Bash Scripting  Bash Academy Guide",
            "title": "Module 2: Bash Scripting"
        },
        {
            "location": "/dm/",
            "text": "Module 3: Discrete Mathematics (OPTIONAL)\n\n\nWhile this module isn't really required to \"learn to code,\" I would recommend that you at least take a stab at it- watch a few of the videos here and there while you're \nworking through other modules, and see if they're relevant to what you want out of this course of study.\n\n\nWhat is Discrete Mathematics?\n\n\nDiscrete mathematics is a branch of mathematics devoted to the logical analysis of systems and countable sets (set theory).  It's much different than the kind of math \nthat you'll learn in \"math class-\" I find that it's more like a series of puzzles, rather than a series of problems and formulas used to solve them.  The kind of \nthinking introduced in discrete mathematics is very similar to the kind of thinking that you'll need to write effective programs and attack the complex problems that \nyou're likely to encounter in higher-level programming exercises.  In addition, you'll encounter a lot of concepts that serve as an introduction to pieces of higher \nmathematics that come into play in all sorts of modern computing tasks.\n\n\nThis series will teach you the majority of what you'll need to know on the subject.\n\n\nYou can supplement the learning from the above course with the book \nDiscrete Mathematics with Applications, 4th Edition.",
            "title": "Module 3- Discrete Mathematics"
        },
        {
            "location": "/dm/#module-3-discrete-mathematics-optional",
            "text": "While this module isn't really required to \"learn to code,\" I would recommend that you at least take a stab at it- watch a few of the videos here and there while you're \nworking through other modules, and see if they're relevant to what you want out of this course of study.",
            "title": "Module 3: Discrete Mathematics (OPTIONAL)"
        },
        {
            "location": "/dm/#what-is-discrete-mathematics",
            "text": "Discrete mathematics is a branch of mathematics devoted to the logical analysis of systems and countable sets (set theory).  It's much different than the kind of math \nthat you'll learn in \"math class-\" I find that it's more like a series of puzzles, rather than a series of problems and formulas used to solve them.  The kind of \nthinking introduced in discrete mathematics is very similar to the kind of thinking that you'll need to write effective programs and attack the complex problems that \nyou're likely to encounter in higher-level programming exercises.  In addition, you'll encounter a lot of concepts that serve as an introduction to pieces of higher \nmathematics that come into play in all sorts of modern computing tasks.  This series will teach you the majority of what you'll need to know on the subject.  You can supplement the learning from the above course with the book  Discrete Mathematics with Applications, 4th Edition.",
            "title": "What is Discrete Mathematics?"
        },
        {
            "location": "/programming/",
            "text": "Module 4: Programming\n\n\n'Git' Started\n\n\nBefore you get started with this part, I would recommend that you set up a \nGithub account\n and install git on your virtual Linux machine (if it isn't \ninstalled already).  Git is essentially a system for 'saving' entire folders and tracking changes that you make to files.  This might not seem important when you're \ndealing with smaller applications, but as you start to make things that are more complex, it can be a very valuable tool for making sure that you don't lose your hard \nwork.  Github is a free online service that you can use in conjunction with git to store your files on the cloud, share them, and access them from any machine.  If you \never end up applying for a job as a developer, companies will usually ask you for your github account so that they can look at the projects you've worked on in the past \nand get a sense of your skill level- think of it kind of like a portfolio of your work.  You can also use your github to store assignments that you've worked on, papers \nyou've written, classroom notes, or just about anything else.  It's also really neat to be able to look back over your past code and see how far you've progressed since \nyou've started.  Overall, it's an extremely useful and powerful tool!\n\n\nThere's a great interactive tutorial for learning git that you can find \nhere.\n\n\nNow You are Ready to 'Learn to Code' with Ruby\n\n\nThere are a zillion programming languages out there, and all of them have their particular advantages and disadvantages.  However, the important thing to remember (and \nsomething that teachers may not always tell you) is that once you've learned one programming language, learning others is pretty easy by comparison.  Because of this, I \ngenerally recommend that people learn Ruby as their first language, because its grammar and syntax are very intuitive and easy to understand.  Learning Ruby also has the \nadvantage of giving you experience in a language that is in high demand, because it is used by many companies to develop complex websites and services using the Ruby on \nRails framework.\n\n\nThis video will give you a good introduction to the Ruby language and the kinds of things it can do\n.\n\n\nIn my opinion, the best book on Ruby ever written is \"Why's Poignant Guide to Ruby-\" it's basically a comic book that teaches you Ruby, and you can find it \n\nhere.\n\n\nYou should also take a look at \"Learn Ruby the Hard Way,\" which you can find \nhere\n.  It's not nearly as fun as Why's \nPoignant Guide, but it does go into more detail and includes more exercises for you to work on.\n\n\nIf you ever need to know more about a particular class or function in Ruby, you can also search the official Ruby documentation \nhere\n.\n\n\nAdding Rails to your Ruby\n\n\nNow that you're a seasoned Ruby veteran, it's time to learn the web framework for Ruby, called \"Ruby on Rails,\" \"Rails,\" or \"RoR\" for short. This framework will allow \nyou to develop powerful, fully-featured websites with the Ruby language.\n\n\nYou can get a basic introduction to Rails through \nCodeacademy's free Rails \ncourse\n.\n\n\nOnce you've finished that, it's time to tackle \nthe definitive guide to Rails-\n Michael Hartl's \n\"The Ruby on Rails Tutorial.\"\n\n\nThis tutorial is not for the faint of heart- it may take you weeks to complete, but if you can make it through, you've got what it takes to be a web developer.\n\n\nAfter you've completed Hartl's tutorial, there's just one more step in between you and Ruby greatness: the \nRuby Koans\n.  The Koans are intended to \nteach you about Test Driven Development (TDD), which is a very in-demand skill in the development industry- most junior developers begin their careers writing tests, and \nif you can do it in the wild, you can do it in an office.",
            "title": "Module 4- Programming"
        },
        {
            "location": "/programming/#module-4-programming",
            "text": "",
            "title": "Module 4: Programming"
        },
        {
            "location": "/programming/#git-started",
            "text": "Before you get started with this part, I would recommend that you set up a  Github account  and install git on your virtual Linux machine (if it isn't \ninstalled already).  Git is essentially a system for 'saving' entire folders and tracking changes that you make to files.  This might not seem important when you're \ndealing with smaller applications, but as you start to make things that are more complex, it can be a very valuable tool for making sure that you don't lose your hard \nwork.  Github is a free online service that you can use in conjunction with git to store your files on the cloud, share them, and access them from any machine.  If you \never end up applying for a job as a developer, companies will usually ask you for your github account so that they can look at the projects you've worked on in the past \nand get a sense of your skill level- think of it kind of like a portfolio of your work.  You can also use your github to store assignments that you've worked on, papers \nyou've written, classroom notes, or just about anything else.  It's also really neat to be able to look back over your past code and see how far you've progressed since \nyou've started.  Overall, it's an extremely useful and powerful tool!  There's a great interactive tutorial for learning git that you can find  here.",
            "title": "'Git' Started"
        },
        {
            "location": "/programming/#now-you-are-ready-to-learn-to-code-with-ruby",
            "text": "There are a zillion programming languages out there, and all of them have their particular advantages and disadvantages.  However, the important thing to remember (and \nsomething that teachers may not always tell you) is that once you've learned one programming language, learning others is pretty easy by comparison.  Because of this, I \ngenerally recommend that people learn Ruby as their first language, because its grammar and syntax are very intuitive and easy to understand.  Learning Ruby also has the \nadvantage of giving you experience in a language that is in high demand, because it is used by many companies to develop complex websites and services using the Ruby on \nRails framework.  This video will give you a good introduction to the Ruby language and the kinds of things it can do .  In my opinion, the best book on Ruby ever written is \"Why's Poignant Guide to Ruby-\" it's basically a comic book that teaches you Ruby, and you can find it  here.  You should also take a look at \"Learn Ruby the Hard Way,\" which you can find  here .  It's not nearly as fun as Why's \nPoignant Guide, but it does go into more detail and includes more exercises for you to work on.  If you ever need to know more about a particular class or function in Ruby, you can also search the official Ruby documentation  here .",
            "title": "Now You are Ready to 'Learn to Code' with Ruby"
        },
        {
            "location": "/programming/#adding-rails-to-your-ruby",
            "text": "Now that you're a seasoned Ruby veteran, it's time to learn the web framework for Ruby, called \"Ruby on Rails,\" \"Rails,\" or \"RoR\" for short. This framework will allow \nyou to develop powerful, fully-featured websites with the Ruby language.  You can get a basic introduction to Rails through  Codeacademy's free Rails \ncourse .  Once you've finished that, it's time to tackle  the definitive guide to Rails-  Michael Hartl's  \"The Ruby on Rails Tutorial.\"  This tutorial is not for the faint of heart- it may take you weeks to complete, but if you can make it through, you've got what it takes to be a web developer.  After you've completed Hartl's tutorial, there's just one more step in between you and Ruby greatness: the  Ruby Koans .  The Koans are intended to \nteach you about Test Driven Development (TDD), which is a very in-demand skill in the development industry- most junior developers begin their careers writing tests, and \nif you can do it in the wild, you can do it in an office.",
            "title": "Adding Rails to your Ruby"
        }
    ]
}